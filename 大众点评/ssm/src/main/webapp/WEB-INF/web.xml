<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		 xsi:schemaLocation="http://java.sun.com/xml/ns/javaee
            http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
		 version="2.5" xmlns="http://java.sun.com/xml/ns/javaee">
  <display-name>Archetype Created Web Application</display-name>

	<welcome-file-list>
	<welcome-file>index.jsp</welcome-file>
	</welcome-file-list>
	<!-- 加载spring的配置文件 -->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>classpath:spring/root-context.xml</param-value>
	</context-param>

	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>
	<!--解决中文乱码-->
	<filter>
		<filter-name>CharacterEncodingFilter</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		<init-param>
			<param-name>encoding</param-name>
			<param-value>UTF-8</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>CharacterEncodingFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	<!--文件上传-->
	<filter>
		<filter-name>MultipartFilter</filter-name>
		<filter-class>org.springframework.web.multipart.support.MultipartFilter</filter-class>
		<init-param>
			<param-name>multipartResolverBeanName</param-name>
			<param-value>multipartResolver</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>MultipartFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	<!--浏览器form表单只支持GET与POST请求，而DELETE、PUT等method并不支持，-->
	<!--spring3.0添加了一个过滤器，可以将这些请求转换为标准的http方法，-->
	<!--使得支持GET、POST、PUT与DELETE请求，该过滤器为HiddenHttpMethodFilter。-->
	<filter>
		<filter-name>hiddenHttpMethodFilter</filter-name>
		<filter-class>org.springframework.web.filter.HiddenHttpMethodFilter</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>hiddenHttpMethodFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

	<servlet>
		<servlet-name>spring</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>classpath:spring/applicationContext.xml</param-value>
		</init-param>
		<load-on-startup>1</load-on-startup>
	</servlet>
	<servlet-mapping>
		<servlet-name>spring</servlet-name>
		<url-pattern>/</url-pattern>
	</servlet-mapping>
	<!--所有的jsp多可以访问-->
	<jsp-config>
		<jsp-property-group>
			<url-pattern>*.jsp</url-pattern>
			<include-prelude>/WEB-INF/jsp/system/common.jsp</include-prelude>
		</jsp-property-group>
	</jsp-config>
	<!--由上面的初始化过程可知容器对于web.xml的加载过程是context-param >> listener  >> fileter  >> servlet-->
	<!--在启动Web项目时，容器(比如Tomcat)会读web.xml配置文件中的两个节点<listener>和<contex-param>。-->
	<!--接着容器会创建一个ServletContext(上下文),应用范围内即整个WEB项目都能使用这个上下文。-->
	<!--接着容器会将读取到<context-param>转化为键值对,并交给ServletContext。-->
	<!--容器创建<listener></listener>中的类实例,即创建监听-->
	<!--（备注：listener定义的类可以是自定义的类但必须需要继承ServletContextListener）。-->
	<!--在监听的类中会有一个contextInitialized(ServletContextEvent event)初始化方法，-->
	<!--在这个方法中可以通过event.getServletContext().getInitParameter("contextConfigLocation")-->
	<!--来得到context-param 设定的值。在这个类中还必须有一个contextDestroyed(ServletContextEvent event) -->
	<!--销毁方法.用于关闭应用前释放资源，比如说数据库连接的关闭。-->
	<!--得到这个context-param的值之后,你就可以做一些操作了.-->
	<!--注意,这个时候你的WEB项目还没有完全启动完成.这个动作会比所有的Servlet都要早。-->

</web-app>
